
#################################################################
# >> analysis:
#
# Attributes for controlling the duration and type of analysis.
#
#  max_entities: 
#    The maximum amount of entities for which to allocate. Once the network
#    has grown to this amount, the entity add rate will artifically drop to 0.
#    AD: TEMPORARY NOTE Simulation no longer halts at 'max_entities'.
#  max_time:
#    The maximum simulation-time for the simulation. Once it has elapsed, the simulation halts.
#    Interacting with the simulation does not alter the simulation-time.
#  max_real_time:
#    The maximum real-time for the simulation. Once it has elapsed, the simulation halts.
#    Note that interacting with the simulation DOES detract from this time.
#  initial_entities:
#    The initial entity amount to create.
#  enable_interactive_mode:
#    Whether interactive mode should be triggered by Ctrl+C or ./scripts/stop.sh (triggers SIGUSR1).
#  use_barabasi: 
#    If true, the global follow rate is ignored. Follow thresholds not needed.
#  use_random_time_increment: 
#    Increments by 1/sum(rates) on average
#  use_flawed_followback: 
#    Whether to follow-back by a fixed 40%.
#  follow_model: 
#    Accepted models: 'random', 'preferential', 'entity', 'preferential-entity', 'hashtag' 'twitter'
#  stage1_unfollow: 
#    Whether to have an unfollow model assuming constant 'chattiness', compares the chatiness of an entity wrt to the following set.
#  unfollow_tweet_rate: 
#    Tweets per minute. Chattiness for which to be considered for unfollow.
#################################################################

analysis:
  initial_entities:
    20
  max_entities: 
    100001
  max_time: 
    hour
  max_real_time: 
    hour
  enable_interactive_mode:
    true
  use_barabasi: 
    false 
  use_random_time_increment: 
    true
  use_followback: 
    false
  follow_model: # See notes above
    preferential
  # model weights ONLY necessary for follow method 'twitter'    
  model_weights: {random: 0.20, preferential: 0.20, entity: 0.20, preferential_entity: 0.20, hashtag: 0.20}
  
  stage1_unfollow: 
    false
  unfollow_tweet_rate: 
    10
  use_hashtag_probability:
    1

#################################################################
# >> rates:
#
# The rate function for adding entities to the network.
#################################################################

rates:
  add: {function: constant, value: 123.7}

#################################################################
# >> output:
#
# Various options for the output of the simulation, both while it
# runs and for post-analysis.
#################################################################

output:
  save_network_on_timeout: 
    false
  load_network_on_startup:
    false
  ignore_load_config_check: # Whether to abort loading configuration because of (strictly) mismatching configuration
    false
  save_file: # File to save to, and load from
    network_state.sav
  stdout_basic: 
    true
  stdout_summary: 
    true
  visualize: 
    true
  verbose: 
    true
  entity_stats: 
    true
  degree_distributions: 
    true
  tweet_analysis: 
    true
  retweet_visualization:
    false
  main_statistics:
    true

#################################################################
# >> *_ranks:
# Options for the categorization based on various attributes.
#################################################################

tweet_ranks: 
  thresholds: {bin_spacing: linear, min: 10, max: 300, increment: 10}
retweet_ranks:
  thresholds: {bin_spacing: linear, min: 10, max: 300, increment: 10}
follow_ranks:
  thresholds: {bin_spacing: linear, min: 0, max: 5000001, increment: 1}
  weights:    {bin_spacing: linear, min: 1, max: 5000000, increment: 1}

#################################################################
# >> tweet_observation: 
#
# An observation probability density function that gives 
# the probability that a tweet is observed at a certain time by an 'ideal observer'. 
# An 'ideal observer' is one which always sees a tweet, eventually.'
# The observation PDF is used for both retweeting and follow-from-tweet.
# We combine this with a relevance factor, r, where 0 <= r <= 1.0, we in turn
# determines the probability that a given entity will act on a given tweet, with enough time.
#
#  density_function:
#    Probability 'density' function to sample logarithmatically.
#    Provided as if a Python function of 'x'. It is integrated using the scipy.integrate module. 
#    Note technically not a true PDF because one does NOT need to have an integral range that sums to 1.0.
#    The function, after integration, _will_ be normalized for you.
#
#  x_start:
#    In arbitrary units. The beginning x-value to integrate from.
#  x_end:
#    In arbitrary units. The end x-value to integrate to.
#
#  initial_resolution:
#    In arbitrary units. The initial binning resolution. 
#    That is, the x-step with which to begin binning. The binning resolution is decreased from there on.
#  resolution_growth_factor:
#    How quickly the resolution grows from one bin to the next. 
#    Quicker is more efficient, but with less precise rates in later bins.
#  time_span:
#    In minutes. The time over which the function is defined.
#    After this, tweets will 'disappear'.
#################################################################

tweet_observation: # 'Omega'
   density_function: 
       2.45 / (x)**1.1 
   x_start: 
       5
   x_end: 
       600
   initial_resolution: 
       1.0
   resolution_growth_factor: 
       1.05
   time_span: 
       hour

#################################################################
# >> ideologies: 
# Abstract categorizations of similar beliefs.
# The amount of ideologies MUST match N_IDEOLOGIES in 
# config_static.h!
#################################################################

ideologies:
  - name: Red
  - name: Blue

#################################################################
# >> regions: 
#
# Locations, such as countries, can be represented abstractly. 
# Note that the number of regions must exactly match N_BIN_REGIONS in config_static.h!
# Additionally, it is required that every region have exactly N_BIN_SUBREGIONS subregions.
#
# add_weight:
#   Required for each region. The weight with which 
#   this region is chosen.
#
# The following are definable for each subregion.
# If specified in the region, it will be an inherited default.
#  languages_weights:
#    Weights with which English, French, French-and-English are chosen.
#  idealogy_weights:
#    Weights with which an entity is a of a given 'idealogy'

#################################################################

regions:
  - name: Ontario
    add_weight: 1

    preference_class_weights: {StandardPref: 100}
    entity_class_weights: {Standard: 100}
    ideology_weights: {Red: 100, Blue: 100}
    language_weights: {English: 50, French: 25, French+English: 25}

  - name: Quebec
    add_weight: 5

    #Inherited:
    preference_class_weights: {StandardPref: 100}
    entity_class_weights: {Standard: 100}
    language_weights: {English: 80, French: 10, French+English: 10}
    ideology_weights: {Red: 100, Blue: 100}

#################################################################
# >> config_static: 
# Manually duplicated values from config_static.h. 
# These values MUST match config_static.h!
#################################################################

config_static:
    # These values should match your C++ config_static.h limits!!
    humour_bins: 2 # Amount of discrete bins for humour

#################################################################
# >> preference_classes: 
# The different preference stereotypes that users in the network can have.
#
# tweet_transmission:
#   The transmission probability for a person of a certain preference class towards
#   a tweet of a given origin & content.
#   Effectively, this determines the proportion (on average) of a follower type
#   that will, eventually (according to the tweet observation PDF), retweet a tweet.
#
#   Can be provided for an entity type, or the keys 'else' or 'all'. 
#   Both 'else' and 'all' have the functionality of defining the transmission probability
#   function for all otherwise unspecified entity types.
#
#   Transmission probability functions are automatically converted into the necessary tables
#   using Python. The strings provided can be any valid Python.
#################################################################

preference_classes:
 - name: StandardPref
 
  # Determines the probability that a tweet is reacted to by this 
  # preference class:
   tweet_transmission: 
      plain: # Also applies to musical tweets
        Standard: 0.01
        Celebrity: 0.1
        else: 0
      different_ideology:
        Standard: 0.001
        Celebrity: 0.01
        else: 0
      same_ideology:
        Standard: 0.2
        Celebrity: 0.4
        else: 0
      humourous:
        Standard: 0.01 
        Celebrity: 0.1
        else: 0
   # Probability that we will follow as a reaction:
   follow_reaction_prob:
      0.5

 - name: NoRetweetPref
   tweet_transmission: 
      plain: # Also applies to musical tweets
        Standard: 1.0
        Celebrity: 0
        else: 0
      different_ideology:
        Standard: 0
        Celebrity: 0
        else: 0
      same_ideology:
        Standard: 0
        Celebrity: 0
        else: 0
      humourous:
        Standard: 0
        Celebrity: 0
        else: 0
  # Probability that we will follow as a reaction:
   follow_reaction_prob:
      0.5

#################################################################
# >> entities: 
#
# The different types of entities in the network, and their 
# associated rates.
#################################################################

entities:
  - name: Standard
    weights:
      # Weight with which this entity is created
      add: 80 
      # Weight with which this entity is followed in entity follow
      follow: 5
      tweet_type:
        ideological: 1.0
        plain: 1.0
        musical: 1.0
        humourous: 1.0 # Can be considered the humourousness of the entity type
    # Probability that following this entity results in a follow-back
    followback_probability: 44
    hashtag_follow_options:
      care_about_region: true # does the entity care about where the entity they will follow is from?
      care_about_ideology: false # does the entiy care about which ideology the entity has?
    rates: 
        # Rate for follows from this entity:
        follow: {function: constant, value: 0.00052}
        # Rate for tweets from this entity:
        tweet: {function: constant, value: 0.00138}

  - name: Celebrity
    weights: 
        add: 5 
        follow: 80
        tweet_type:
          ideological: 1.0
          plain: 1.0
          musical: 1.0
          humourous: 1.0 # Can be considered the humourousness of the entity type
    followback_probability: 0
    hashtag_follow_options:
      care_about_region: true # does the entity care about where the entity they will follow is from?
      care_about_ideology: false # does the entiy care about which ideology the entity has?
    rates:
        follow: {function: constant, value: 0.00052}
        tweet: {function: constant, value: 0.00138}
        
  - name: Bot
    weights: 
        add: 5
        follow: 0
        tweet_type:
          ideological: 1.0
          plain: 1.0
          musical: 1.0
          humourous: 1.0 # Can be considered the humourousness of the entity type
    followback_probability: 0
    hashtag_follow_options:
      care_about_region: true # does the entity care about where the entity they will follow is from?
      care_about_ideology: false # does the entiy care about which ideology the entity has?
    rates:
        follow: {function: constant, value: 0.00052}
        tweet: {function: constant, value: 0.00138}

  - name: Organization
    weights:
        add: 10
        follow: 15
        tweet_type:
          ideological: 1.0
          plain: 1.0
          musical: 1.0
          humourous: 1.0 # Can be considered the humourousness of the entity type
    followback_probability: 0
    hashtag_follow_options:
      care_about_region: true # does the entity care about where the entity they will follow is from?
      care_about_ideology: false # does the entiy care about which ideology the entity has?
    rates:
        follow: {function: constant, value: 0.00052}
        tweet: {function: constant, value: 0.00138}
