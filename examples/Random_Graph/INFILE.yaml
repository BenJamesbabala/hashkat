analysis:
# The maximum number of entities (users) in the simulation. 
 max_entities: 
    100001
# The maximum amount of time (minutes) in the simulation.
  max_time:
    1000.0 # 1/10 year
# The initial number of entities (users) in the simulation.
  initial_entities:
    100000
# alternative simulation to produce a scale free network, set to false because we want a random graph!
  use_barabasi: false 
# Determines the time progression, if false, the timestep is constant.
  use_random_time_increment: true 
# Entities tend to follow eachother back in a real life social network, but it is set to false for now.
  use_flawed_followback: false
# We want to produce a random graph, therefore our follow model is 'random'.
  follow_model: random 
# the unfollow rate is set to something absurd (10 tweets / min) so no unfollowing happens.
  unfollow_tweet_rate: 10 

rates:
  # Rate of adding entities into the network, a random graph is static therefore the rate is 0.
  add: {function: constant, value: 0.0}

output:
# print information of the network out to screen.
  stdout_basic: true
  stdout_summary: true
# write data files to possibly visualize the network.
  visualize: true
  verbose: true
# write data files for network topology.
  entity_stats: true
  degree_distributions: true
  tweet_analysis: true

# set up bins to organize entities for tweeting, retweeting, and number of followers. The follow ranks are dismissed for a random network simulation.
tweet_ranks: 
  thresholds: {bin_spacing: linear, min: 10, max: 300, increment: 10}
retweet_ranks:
  thresholds: {bin_spacing: linear, min: 10, max: 300, increment: 10}
follow_ranks:
  thresholds: {bin_spacing: linear, min: 0, max: 100001, increment: 1}
  weights:    {bin_spacing: linear, min: 1, max: 100000, increment: 1}

# The different languages in the network, the weights are normalized.
languages:
  weights:
    English: 100
    French: 25
    French+English: 25

# FIXXXXXXX THIS
tweet_observation: # 'Omega'
   # Configures an observation probability density function that gives 
   # the probability that a tweet is observed at a certain time by an 'ideal observer'. 
   # An 'ideal observer' is one which always sees a tweet, eventually.'
   # The observation PDF is used for both retweeting and follow-from-tweet.
   # We combine this with a relevance factor, r, where 0 <= r <= 1.0, we in turn
   # determines the probability that a given entity will act on a given tweet.

   half_life: 22.5 # In minutes. Determines half-life of exponetial decay.
   initial_resolution: 0.01 # In minutes. The time-step with which to begin binning.
   final_rate: 0.001 # A final value when to stop binning our omega feunction.

tweet_relevance:
    # Determine amount of discrete bins; should have correspondence with the C++ config_static.h limits.
    # Distance is the value [0...1] determined by a modular distance function.
    distance_bins: 10
    humour_bins: 10

    # Determine traits relevant to the relevance determination function 
    # Relevance functions are automatically converted into the necessary tables
    # using Python. The strings provided can be any valid Python code.
    preference_classes:
      - name: OnlyStandard
        retweet_relevance:
          Standard: 1 # Can be any valid Python code
          else: 0 # Can be any valid Python code

      - name: OnlyCelebrities
        retweet_relevance: 
          Celebrity: 1 # Can be any valid Python code
          else: 0  # Can be any valid Python code

entities:
  - name: Standard
    weights:
      # Weight with which this entity is created
      add: 80 
      # Weight with which this entity is followed in preferential follow
      follow: 5
    # Probability that following this entity results in a follow-back
    followback_probability: 40
    rates: 
        # Rate for follows from this entity:
        follow: {function: constant, value: 0.01}
        # Rate for tweets from this entity:
        tweet: {function: constant, value: 0.0}

  - name: Celebrity
    weights: {add: 5, follow: 80}
    followback_probability: 0
    rates:
        follow: {function: constant, value: 0.01}
        tweet: {function: constant, value: 0.0}

  - name: Bot
    weights: {add: 5, follow: 0}
    followback_probability: 0
    rates:
        follow: {function: constant, value: 0.01}
        tweet: {function: constant, value: 0.0}

  - name: Organization
    weights: {add: 10, follow: 15}
    followback_probability: 0
    rates:
        follow: {function: constant, value: 0.01}
        tweet: {function: constant, value: 0.0}
