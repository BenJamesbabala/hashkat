analysis:
  max_entities: 
    1000001
  max_time:
    2591990.0 # 1/10 year
  initial_entities:
    1
  use_barabasi: false # if this is set to 1, the global follow rate will be ignored. Follow thresholds not needed.
  use_random_time_increment: true # increments by 1/sum(rates) on average
  use_flawed_followback: false

  follow_model: preferential-entity # Accepted models: 'random', 'preferential', 'entity', 'preferential-entity'

rates:
  # Rate for creating entities
  add: {function: constant, value: 5.7}

output:
  stdout_basic: true
  stdout_summary: true

  verbose: true
  visualize: true

  degree_distributions: true
  tweet_analysis: true
  cumulative_analysis: false

tweet_ranks: 
  thresholds: {bin_spacing: linear, min: 10, max: 300, increment: 10}
retweet_ranks:
  thresholds: {bin_spacing: linear, min: 10, max: 300, increment: 10}
follow_ranks:
  thresholds: {bin_spacing: linear, min: 0, max: 1001, increment: 1}
  weights:    {bin_spacing: linear, min: 1, max: 1000, increment: 1}

languages:
  weights:
    English: 100
    French: 25
    French+English: 25

tweet_observation:
   # Configures an observation probability density function that gives 
   # the probability that a tweet is observed at a certain time by an 'ideal observer'. 
   # An 'ideal observer' is one which always sees a tweet, eventually.'
   # The observation PDF is used for both retweeting and follow-from-tweet.
   # We combine this with a relevance factor, r, where 0 <= r <= 1.0, we in turn
   # determines the probability that a given entity will act on a given tweet.

   half_life: 90 # In minutes. Determines half-life of exponetial decay.
   initial_resolution: 0.016 # In minutes. The time-step with which to begin binning.
   final_rate: 0.001 # A final value when to stop binning our omega function.

tweet_relevance:
    # Determine amount of discrete bins; should have correspondence with the C++ config_static.h limits.
    # Distance is the value [0...1] determined by a modular distance function.
    distance_bins: 10
    humour_bins: 10
    location_bins: 10

    # Determine traits relevant to the relevance determination function 
    # Relevance functions are automatically converted into the necessary tables
    # using Python. The strings provided are Python strings.
    preference_classes:
      - name: OnlyStandard
        retweet_relevance:
          Standard: 1
          else: 0

      - name: OnlyCelebrities
        retweet_relevance: 
          Celebrity: 1
          else: 0 

entities:
  - name: Standard
    weights:
      # Weight with which this entity is created
      add: 25 
      # Weight with which this entity is followed in preferential follow
      follow: 5
    # Probability that following this entity results in a follow-back
    followback_probability: 40
    rates: 
        # Rate for follows from this entity:
        follow: {function: constant, value: 0.001}
        # Rate for tweets from this entity:
        tweet: {function: constant, value: 0.001}

  - name: Celebrity
    weights: {add: 25, follow: 80}
    followback_probability: 0
    rates:
        follow: {function: constant, value: 0.001}
        tweet: {function: constant, value: 0.001}

  - name: Bot
    weights: {add: 25, follow: 0}
    followback_probability: 0
    rates:
        follow: {function: constant, value: 0.001}
        tweet: {function: constant, value: 0.001}

  - name: Organization
    weights: {add: 25, follow: 15}
    followback_probability: 0
    rates:
        follow: {function: constant, value: 0.0001}
        tweet: {function: constant, value: 0.0001}
